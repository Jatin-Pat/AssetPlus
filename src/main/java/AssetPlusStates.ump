class MaintenanceTicket {
    TicketStatus {
        Open {
            assignStaff(String email, PriorityLevel level, TimeEstimate estimate, boolean approval)/ {

               doAssign(email, level, estimate, approval);

               } -> Assigned;

            beginWork() /{rejectBegin("open");} -> Open;
            
          	approve() / {rejectApprove("open");}  -> Open;

          	disapprove(String ticketID, String date, String reason) / {rejectDisapprove("open");} -> Open;

          	completeWork() / {rejectComplete("open");} -> Open;
          	
        }
        Assigned {
            beginWork() -> InProgress;

          	assignStaff(String email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {rejectAssign("assigned");} -> Assigned;

          	completeWork() / {rejectComplete("assigned");} -> Assigned;

          	approve() / {rejectApprove("assigned");}  -> Assigned;

          	disapprove(String ticketID, String date, String reason) / {rejectDisapprove("assigned");} -> Assigned;

        }
        InProgress {
            completeWork() [!this.hasFixApprover()] -> Resolved;
            
            completeWork() [this.hasFixApprover()] -> Closed;
          
            beginWork() /{rejectBegin("in progress");} -> InProgress;

          	assignStaff( String email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {rejectAssign("in progress");} -> InProgress;
            
            approve() / {rejectApprove("in progress");}  -> InProgress;

            disapprove(String ticketID, String date, String reason) / {rejectDisapprove("in progress");} -> InProgress;
        
        }
        Resolved{
            approve() / {doApprove(String.valueOf(this.getId()));}  -> Closed;

            disapprove(String ticketID, String date, String reason) / {doDisapprove(ticketID, date, reason);} -> InProgress;
          
            completeWork() / {rejectComplete("resolved");} -> Resolved;

          	beginWork() / {rejectBegin("resolved");} -> Resolved;

          	assignStaff(String email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {rejectAssign("resolved");} -> Resolved;
           
        } 
        Closed{
            completeWork() / {rejectComplete("closed");} -> Closed;

            assignStaff(String email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {

               rejectAssign("closed");
               } -> Closed;

            approve() / {rejectApprove("closed");}  -> Closed;

            disapprove(String ticketID, String date, String reason) / {rejectDisapprove("closed");} -> Closed;

            beginWork() / {rejectBegin("closed");} -> Closed;

          }
    }


    //Verify with team if this is correct
    //Blame Ana if not Good
    private void doAssign(String email, PriorityLevel level, TimeEstimate estimate, boolean approval){
      //Implement this
      //Have this call the assign controller method
      MaintenanceTicket ticket = this;
            if (ticket == null){
              throw new RuntimeException("Maintenance ticket does not exist.");
            }
            ticket.setTicketFixer((HotelStaff) User.getWithEmail(email));
            ticket.setPriority(level);
            ticket.setTimeToResolve(estimate);
            if(approval){
              ticket.setFixApprover(this.getAssetPlus().getManager());
            }
            //ticket.approvalRequired = approval;
          }

  	private void doApprove(String id){
      MaintenanceTicket ticket = MaintenanceTicket.getWithId(Integer.parseInt(id));
      if (ticket == null){
        throw new RuntimeException("Maintenance ticket does not exist.");
      }
    }

    private void doDisapprove(String id, String date, String description){
      
      MaintenanceTicket ticket = MaintenanceTicket.getWithId(Integer.parseInt(id));
      ticket.addTicketNote(Date.valueOf(date), description, ticket.getAssetPlus().getManager());
    }
    
    private void doBeginWork(){
      //Implement this
    }

    //ALL REJECT METHODS DUE TO WRONG STATE
    //Behrad
    private String rejectBegin(String status){
      if(status.contains("progress")){
        throw new RuntimeException("The maintenance ticket is already in progress.");
      }
      throw new RuntimeException("Cannot start a maintenance ticket which is "+status+".");
    }
    //Behrad
    private String rejectComplete(String status){
      if(status.contains("complete") || status.contains("resolved")){
        throw new RuntimeException("The maintenance ticket is already "+status);
      }
      throw new RuntimeException("Cannot complete a maintenance ticket which is "+status+".");
    }
    //Behrad
    private String rejectAssign(String status){
      if (status.contains("assigned")){
        throw new RuntimeException("The maintenance ticket is already assigned.");
     }
      throw new RuntimeException("Cannot assign a ticket which is "+status+".");
    }

    //HAVE TO DISCUSS THE FOLLOWING TWO WITH TEAM
    //Behrad & Marc-Antoine
    private String rejectApprove(String status){
      if (status.contains("closed")){
        throw new RuntimeException("The maintenance ticket is already closed.");
      }
      throw new RuntimeException("Cannot approve a maintenance ticket which is "+status+".");
    }
    //Behrad & Marc-Antoine
    private String rejectDisapprove(String status){
      throw new RuntimeException("Cannot approve a maintenance ticket which is "+status+".");
    }
}