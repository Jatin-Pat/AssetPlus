class MaintenanceTicket {
    TicketStatus {
        Open {
            //event action
            assignStaff(Employee email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {
               doAssign(email, level, estimate, approval);
               } -> Assigned;
            
          	approve(MaintenanceTicket ticket) / {rejectApprove(ticket);}  -> Open;
          	disapprove(MaintenanceTicket ticket) / {rejectDisapprove(ticket);} -> Open;
          	completeWork() / {rejectComplete("open")} -> Open;
          	beginWork() /{rejectBegin("open")} -> Open;
          	
        }
        Assigned {
            beginWork() -> InProgress;

          	assignStaff(Employee email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {rejectAssign(email, level, estimate, approval);} -> Assigned;
          	completeWork() / {rejectComplete("assigned")} -> Assigned;
          	approve(MaintenanceTicket ticket) / {rejectApprove(ticket);}  -> Assigned;
          	disapprove(MaintenanceTicket ticket) / {rejectDisapprove(ticket);} -> Assigned;
        }
        InProgress {
            completeWork() [getApprovalRequired()] -> Resolved;
            completeWork() [!getApprovalRequired()] -> Closed;
          
          	//Add Error when already InProgress
            beginWork() /{rejectBegin("in progress")} -> InProgress;
          	assignStaff(Employee email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {rejectAssign(email, level, estimate, approval);} -> InProgress;
            approve(MaintenanceTicket ticket) / {rejectApprove(ticket);}  -> InProgress;
            disapprove(MaintenanceTicket ticket) / {rejectDisapprove(ticket);} -> InProgress;
        }
        Resolved{
          	//add fields
            approve(MaintenanceTicket ticket) / {doApprove(ticket);}  -> Closed;
            //add fields
            disapprove(MaintenanceTicket ticket) / {doDisapprove(ticket);} -> InProgress;
          
            completeWork() / {rejectComplete("resolved")} -> Resolved; //Cannot complete if already resolved
          	beginWork() / {rejectBegin("resolved")} -> Resolved;
          	assignStaff(Employee email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {rejectAssign(email, level, estimate, approval);} -> Resolved;
           
        } 
        Closed{
            completeWork() / {rejectComplete("closed")} -> Closed; //Cannot complete if already closed
            assignStaff(Employee email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {
               rejectAssign(email, level, estimate, approval);
               } -> Closed;
            approve(MaintenanceTicket ticket) / {rejectApprove(ticket);}  -> Closed;
            disapprove(MaintenanceTicket ticket) / {rejectDisapprove(ticket);} -> Closed;
            beginWork() / {rejectBegin("closed")} -> Closed;
          }
    }


    private void doAssign(Employee email, PriorityLevel level, TimeEstimate estimate, approvalRequired approval){
      //Implement this
    }
    private void rejectAssign(email, level, estimate, approval){
     //Implement this
    }

    //Should it be int or String instead of MaintenanceTicket
  	private void doApprove(MaintenanceTicket id){
      MaintenanceTickett ticket = getMaintenanceTicket(parse.Integer(id));
      if (ticket == null){
        throw new RuntimeException("Maintenance ticket does not exist.");
      }
      //if (ticket.getTicketStatus() == "Resolved"){ //Don't think that's necessary
      //  ticket.approve();
      //}
    }

    //Should it be int or String instead of MaintenanceTicket
    private void doDisapprove(MaintenanceTicket id, Date date, Description description, Manager email){
      MaintenanceTicket ticket = getMaintenanceTicket(parse.Integer(id));
      //Are they strings?
      if(ticket == null){
        throw new RuntimeException("Maintenance ticket does not exist.");
      }

      if (ticket.getTicketStatus() == Resolved){ //Don't think that's necessary
        if(email = "manager@ap.com"){ //Don't think that's necessary
          Manager manager = getAssetPlus.getManager();
          ticketNote = addTicketNote(date, description, manager);
      }
      }
    }
    
    private void rejectApprove(MaintenanceTicket id){
      MaintenanceTicket ticket = getMaintenanceTicket(parse.Integer(id));
      if (ticket == null){ // necessary ??
        throw new RuntimeException("Maintenance ticket does not exist");
      }
      
      String ticketStatus =  ticket.getTicketStatus();
      //are they string? 
      if (ticketStatus == Closed){
        throw new RuntimeException("The maintenance ticket is already closed.");
      }
      throw new RuntimeException("Cannot approve a maintenance ticket which is "+ ticketStatus.toLowerCase() +".");
    }

    private void rejectDisapprove(MaintenanceTicket id){
      //I think all this method should do is return an error saying it cant be disapproved
      // since its in the wrong state

      MaintenanceTicket ticket = getMaintenanceTicket(parse.Integer(id));
      if (ticket == null){ // necessary ??
        throw new RuntimeException("Maintenance ticket does not exist");
      }
      String ticketStatus =  ticket.getTicketStatus();
      throw new RuntimeException("Cannot disapprove a maintenance ticket which is "+ ticketStatus.toLowerCase() +".");
    }



    private void doBeginWork(){
      //Implement this
    }

    //Behrad
    private void rejectBegin(String statusOfTicket){
      //Covers all beginWork rejections from states where ticket work cannot be started
      throw new RuntimeException("Cannot begin a maintenance ticket which is "+statusOfTicket+".");
    }

}