class MaintenanceTicket {
    TicketStatus {
        Open {
            assignStaff(MaintenanceTicket ticket, Employee email, PriorityLevel level, TimeEstimate estimate, boolean approval)/ {

               doAssign(email, level, estimate, approval);

               } -> Assigned;

            beginWork() /{rejectBegin("open");} -> Open;
            
          	approve() / {rejectApprove("open");}  -> Open;

          	disapprove(String ticketID, String date, String reason) / {rejectDisapprove("open");} -> Open;

          	completeWork() / {rejectComplete("open");} -> Open;
          	
        }
        Assigned {
            beginWork() -> InProgress;

          	assignStaff(MaintenanceTicket ticket, Employee email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {rejectAssign("assigned");} -> Assigned;

          	completeWork() / {rejectComplete("assigned");} -> Assigned;

          	approve() / {rejectApprove("assigned");}  -> Assigned;

          	disapprove(String ticketID, String date, String reason) / {rejectDisapprove("assigned");} -> Assigned;

        }
        InProgress {
            completeWork() [!this.hasFixApprover()] -> Resolved;
            
            completeWork() [this.hasFixApprover()] -> Closed;
          
            beginWork() /{rejectBegin("in progress");} -> InProgress;

          	assignStaff(MaintenanceTicket ticket, Employee email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {rejectAssign("in progress");} -> InProgress;
            
            approve() / {rejectApprove("in progress");}  -> InProgress;

            disapprove(String ticketID, String date, String reason) / {rejectDisapprove("in progress");} -> InProgress;
        
        }
        Resolved{
            approve() / {doApprove(ticket);}  -> Closed;

            disapprove(String ticketID, String date, String reason) / {doDisapprove(ticketID, date, reason);} -> InProgress;
          
            completeWork() / {rejectComplete("resolved");} -> Resolved;

          	beginWork() / {rejectBegin("resolved");} -> Resolved;

          	assignStaff(MaintenanceTicket ticket, Employee email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {rejectAssign("resolved");} -> Resolved;
           
        } 
        Closed{
            completeWork() / {rejectComplete("closed");} -> Closed;

            assignStaff(MaintenanceTicket ticket, Employee email, PriorityLevel level, TimeEstimate estimate, boolean approval) / {

               rejectAssign("closed");
               } -> Closed;

            approve() / {rejectApprove("closed");}  -> Closed;

            disapprove(String ticketID, String date, String reason) / {rejectDisapprove("closed");} -> Closed;

            beginWork() / {rejectBegin("closed")} -> Closed;

          }
    }



    //Verify with team if this is correct
    //Blame Jatin if not Good
    /*
    private boolean isManager(String email){
      String user = User.getWithEmail(email).email;
      return user != null && user.equals("manager@ap.com");
    }


    //Verify with team if this is correct
    //Blame Jatin if not Good
    private boolean isHotelStaff(String email){
      String user = User.getWithEmail(email).email;
      return user != null && user.endsWith("@ap.com");
    }*/



    //Verify with team if this is correct
    //Blame Ana if not Good
    private void doAssign(MaintenanceTicket id, String email, PriorityLevel level, TimeEstimate estimate, boolean approval){
      //Implement this
      //Have this call the assign controller method
      MaintenanceTicket ticket = getMaintenanceTicket(Integer.parseInt(id));
            if (ticket == null){
              throw new RuntimeException("Maintenance ticket does not exist.");
            }
            ticket.setTicketFixer(getWithEmail(email));
            ticket.setPriority(level);
            ticket.setTimeToResolve(estimate);
            ticket.approvalRequired = approval;
          }
    }

    //Should it be int or String instead of MaintenanceTicket
  	private void doApprove(String id){



      MaintenanceTicket ticket = getMaintenanceTicket(Integer.parseInt(id));
      if (ticket == null){
        throw new RuntimeException("Maintenance ticket does not exist.");
      }
      //if (ticket.getTicketStatus() == "Resolved"){ //Don't think that's necessary
      //  ticket.approve();
      //}
    }

    //Should it be int or String instead of MaintenanceTicket
    private void doDisapprove(String id, String date, String description){
      
      MaintenanceTicket ticket = getMaintenanceTicket(Integer.parseInt(id));
      MaintenanceNote disapproveNote = new MaintenaceNote(Date.valueOf(date), description, ticket,ticket.getAssetPlus );
    }
    
    private void doBeginWork(){
      //Implement this
    }

    //ALL REJECT METHODS DUE TO WRONG STATE
    //Behrad
    private String rejectBegin(String status){
      if(status.contains("progress")){
        //return  "The maintenance ticket is already in progress.";
        throw new RuntimeException("The maintenance ticket is already in progress.");
      }
      //return "Cannot start a maintenance ticket which is "+status+".";
      throw new RuntimeException("Cannot start a maintenance ticket which is "+status+".");
    }
    //Behrad
    private String rejectComplete(String status){
      if(status.contains("complete") || status.contains("resolved")){
        //return "The maintenance ticket is already "+status+".";
        throw new RuntimeExcetion("The maintenance ticket is already "+status);
      }
      //return "Cannot complete a maintenance ticket which is "+status+".";
      throw new RuntimeException("Cannot complete a maintenance ticket which is "+status+".");
    }
    //Behrad
    private String rejectAssign(String status){
     //Case where ticket cannot be assigned due to its status
      if (status.contains("assigned")){
        //return "The maintenance ticket is already assigned.";
        throw new RuntimeException("The maintenance ticket is already assigned.");
     }
     //return "Cannot assign a ticket which is "+status+".";
      throw new RuntimeException("Cannot assign a ticket which is "+status+".");
    }

    //HAVE TO DISCUSS THE FOLLOWING TWO WITH TEAM
    //Behrad & Marc-Antoine
    private String rejectApprove(String status){
      if (status.contains("closed")){
        //return "The maintenance ticket is already closed.";
        throw new RuntimeException("The maintenance ticket is already closed.");
      }
      //return "Cannot approve a maintenance ticket which is "+status+".";
      throw new RuntimeException("Cannot approve a maintenance ticket which is "+status+".");
    }
    //Behrad & Marc-Antoine
    private String rejectDisapprove(String status){
      //return "Cannot approve a maintenance ticket which is "+status+".";
      throw new RuntimeException("Cannot approve a maintenance ticket which is "+status+".");
    }
}